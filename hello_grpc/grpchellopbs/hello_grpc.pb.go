// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.0
// source: hello.proto

package grpchellopbs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	HelloFunction_SayHello_FullMethodName = "/hello_grpc.HelloFunction/SayHello"
)

// HelloFunctionClient is the client API for HelloFunction service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HelloFunctionClient interface {
	SayHello(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*AnswerRequest, error)
}

type helloFunctionClient struct {
	cc grpc.ClientConnInterface
}

func NewHelloFunctionClient(cc grpc.ClientConnInterface) HelloFunctionClient {
	return &helloFunctionClient{cc}
}

func (c *helloFunctionClient) SayHello(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*AnswerRequest, error) {
	out := new(AnswerRequest)
	err := c.cc.Invoke(ctx, HelloFunction_SayHello_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HelloFunctionServer is the server API for HelloFunction service.
// All implementations must embed UnimplementedHelloFunctionServer
// for forward compatibility
type HelloFunctionServer interface {
	SayHello(context.Context, *NameRequest) (*AnswerRequest, error)
	mustEmbedUnimplementedHelloFunctionServer()
}

// UnimplementedHelloFunctionServer must be embedded to have forward compatible implementations.
type UnimplementedHelloFunctionServer struct {
}

func (UnimplementedHelloFunctionServer) SayHello(context.Context, *NameRequest) (*AnswerRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedHelloFunctionServer) mustEmbedUnimplementedHelloFunctionServer() {}

// UnsafeHelloFunctionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HelloFunctionServer will
// result in compilation errors.
type UnsafeHelloFunctionServer interface {
	mustEmbedUnimplementedHelloFunctionServer()
}

func RegisterHelloFunctionServer(s grpc.ServiceRegistrar, srv HelloFunctionServer) {
	s.RegisterService(&HelloFunction_ServiceDesc, srv)
}

func _HelloFunction_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloFunctionServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelloFunction_SayHello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloFunctionServer).SayHello(ctx, req.(*NameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HelloFunction_ServiceDesc is the grpc.ServiceDesc for HelloFunction service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HelloFunction_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hello_grpc.HelloFunction",
	HandlerType: (*HelloFunctionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _HelloFunction_SayHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hello.proto",
}
